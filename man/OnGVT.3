.\" The ROme OpTimistic Simulator (ROOT-Sim) Manual
.\" written by the High Performance and Dependable Computing Systems
.\" Sapienza, University of Rome
.\" http://www.dis.uniroma1.it/~hpdcs
.\"
.\" May 09 2011, Alessandro Pellegrini
.\" 	First version of the manpages

.TH OnGVT 3 2011-05-09 "The ROme OpTimistic Simulator"

.SH NAME
OnGVT - Performs a local termination check.

.SH SYNOPSIS
.B #include <ROOT-Sim.h>


.B bool onGVT(int \fIme\fP, void *\fIsnapshot\fP);

.SH DESCRIPTION

OnGVT is an application-level callback. Any software implementing a simulation model which is
to be run relying on the ROOT-Sim simulation platform must implement this function.
By using this callback, the simulation kernels implements a distributed termination check procedure.
When the Global Virtual Time (\fIGVT\fP) operation is performed, they ask all the Logical Processes
(\fILP\fPs) whether the simulation (at that particular process) has come to a complete state or not.
In the case that all processes reply with a \fItrue\fP value, the simulations complets.

The arguments passed to this callback are:

.IP * 2
\fIme\fP: the global id associated to the LP which is being scheduled for termination check.
.IP *
\fIsnapshot\fP: the last consistent simulation state, which can be used by the LP to decide whether
the simulation can terminate or not.

.PP
The distributed termination check can be executed in a \fIstandard\fP or \fIincremental\fP fashion.
Depending on the \fBcktrm_mode\fP runtime parameter, the platform can be intructed to ask all the LPs
if they want to halt the simulation every time the GVT is computed, or if an LP should be exclueded
from the check once it has replied in a positive way.

This difference can be useful to enhance the simulation performance when dealing with models which can
have an oscillating termination condition (i.e., there is a certain phase of simulation where a simulation
object wants to terminate, and a subsequent phase where it no longer wants to) or a monotone termination
condition (i.e., when a process decides to terminate, it will never change its mind), respectively.

Nevertheless, the same implementation for the termination check can be used in both ways, so that
the OnGVT function can be left untouched.

OnGVT is given a consistent simulation snapshot on a periodic frequency. Therefore, if the simulation
model wants to dump on file some statitics, in this function this task can be correctly implemented.

.SH RETURN VALUE

This function should return \fItrue\fP if the simulation object associated with its execution wants
to terminate the simulation, \fIfalse\fP otherwise.

.SH ERRORS

This function returns no errors.

.SH EXAMPLES

This minimalistic example, shows how OnGVT can be used to check some predicate in the consistent
state passed to it, in order to determine whether the simulation can be halted or not.

.in +4n
.nf
 bool OnGVT(int me, void ∗snapshot) { 
	if (snapshot−>events_executed < TOTAL_NUMBER_OF_EVENTS)
		return false;
	return true;
}
.fi
.in


.SH SEE ALSO
.BR ROOT-Sim (7),
.BR ProcessEvent (3),
.BR ScheduleNewEvent (3),
.BR SetState (3),
.BR rootsim (3),
.BR ROOT-Sim.h (3)

.SH COPYRIGHT
ROOT-Sim is developed by the
.I High Performance and Dependable Computing Systems
(HPDCS) Group at
.I Sapienza, University of Rome,
all the copyrights belong to the Group, and the software is released under GPL-3 License.


For further details, see the page http://www.dis.uniroma1.it/~hpdcs/ROOT-Sim/
